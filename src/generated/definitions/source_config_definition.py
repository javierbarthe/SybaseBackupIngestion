#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated import util

class SourceConfigDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sybbkploc=None, name=None, validate=True):
        """SourceConfigDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param sybbkploc: The sybbkploc of this SourceConfigDefinition.
            :type sybbkploc: str
            :param name: The name of this SourceConfigDefinition.
            :type name: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'sybbkploc': str,
            'name': str
        }

        self.attribute_map = {
            'sybbkploc': 'sybbkploc',
            'name': 'name'
        }
        
        # Validating the attribute sybbkploc and then saving it.
        if validate and sybbkploc is None:
            raise GeneratedClassesError(
                "The required parameter 'sybbkploc' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(SourceConfigDefinition,
                                                          'sybbkploc',
                                                          sybbkploc,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._sybbkploc = sybbkploc

        # Validating the attribute name and then saving it.
        if validate and name is None:
            raise GeneratedClassesError(
                "The required parameter 'name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(SourceConfigDefinition,
                                                          'name',
                                                          name,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._name = name
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sourceConfigDefinition of this SourceConfigDefinition.
        :rtype: SourceConfigDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sybbkploc(self):
        """Gets the sybbkploc of this SourceConfigDefinition.

        SAP ASE Backup Location - Backups need to be named DBNAME_s[0-9]%.dmp

        :return: The sybbkploc of this SourceConfigDefinition.
        :rtype: str
        """
        return self._sybbkploc

    @sybbkploc.setter
    def sybbkploc(self, sybbkploc):
        """Sets the sybbkploc of this SourceConfigDefinition.

        SAP ASE Backup Location - Backups need to be named DBNAME_s[0-9]%.dmp

        :param sybbkploc: The sybbkploc of this SourceConfigDefinition.
        :type sybbkploc: str
        """
        # Validating the attribute sybbkploc and then saving it.
        if sybbkploc is None:
            raise GeneratedClassesError(
                "The required parameter 'sybbkploc' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(SourceConfigDefinition,
                                                          'sybbkploc',
                                                          sybbkploc,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._sybbkploc = sybbkploc

    @property
    def name(self):
        """Gets the name of this SourceConfigDefinition.

        SAP ASE Database Name - Needs exact DB name to look for backup files

        :return: The name of this SourceConfigDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceConfigDefinition.

        SAP ASE Database Name - Needs exact DB name to look for backup files

        :param name: The name of this SourceConfigDefinition.
        :type name: str
        """
        # Validating the attribute name and then saving it.
        if name is None:
            raise GeneratedClassesError(
                "The required parameter 'name' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(SourceConfigDefinition,
                                                          'name',
                                                          name,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._name = name
