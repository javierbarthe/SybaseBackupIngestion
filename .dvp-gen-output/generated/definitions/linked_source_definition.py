#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated import util

class LinkedSourceDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, binarypath=None, asepass=None, asename=None, aseuser=None, mount_location=None, validate=True):
        """LinkedSourceDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param binarypath: The binarypath of this LinkedSourceDefinition.
            :type binarypath: str
            :param asepass: The asepass of this LinkedSourceDefinition.
            :type asepass: str
            :param asename: The asename of this LinkedSourceDefinition.
            :type asename: str
            :param aseuser: The aseuser of this LinkedSourceDefinition.
            :type aseuser: str
            :param mount_location: The mount_location of this LinkedSourceDefinition.
            :type mount_location: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'binarypath': str,
            'asepass': str,
            'asename': str,
            'aseuser': str,
            'mount_location': str
        }

        self.attribute_map = {
            'binarypath': 'binarypath',
            'asepass': 'asepass',
            'asename': 'asename',
            'aseuser': 'aseuser',
            'mount_location': 'mountLocation'
        }
        
        # Validating the attribute binarypath and then saving it.
        if validate and binarypath is None:
            raise GeneratedClassesError(
                "The required parameter 'binarypath' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'binarypath',
                                                          binarypath,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._binarypath = binarypath

        # Validating the attribute asepass and then saving it.
        if validate and asepass is None:
            raise GeneratedClassesError(
                "The required parameter 'asepass' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'asepass',
                                                          asepass,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._asepass = asepass

        # Validating the attribute asename and then saving it.
        if validate and asename is None:
            raise GeneratedClassesError(
                "The required parameter 'asename' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'asename',
                                                          asename,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._asename = asename

        # Validating the attribute aseuser and then saving it.
        if validate and aseuser is None:
            raise GeneratedClassesError(
                "The required parameter 'aseuser' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'aseuser',
                                                          aseuser,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._aseuser = aseuser

        # Validating the attribute mount_location and then saving it.
        if validate and mount_location is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_location' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._mount_location = mount_location
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The linkedSourceDefinition of this LinkedSourceDefinition.
        :rtype: LinkedSourceDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def binarypath(self):
        """Gets the binarypath of this LinkedSourceDefinition.

        Path of SAP ASE Binaries

        :return: The binarypath of this LinkedSourceDefinition.
        :rtype: str
        """
        return self._binarypath

    @binarypath.setter
    def binarypath(self, binarypath):
        """Sets the binarypath of this LinkedSourceDefinition.

        Path of SAP ASE Binaries

        :param binarypath: The binarypath of this LinkedSourceDefinition.
        :type binarypath: str
        """
        # Validating the attribute binarypath and then saving it.
        if binarypath is None:
            raise GeneratedClassesError(
                "The required parameter 'binarypath' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'binarypath',
                                                          binarypath,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._binarypath = binarypath

    @property
    def asepass(self):
        """Gets the asepass of this LinkedSourceDefinition.

        Stage DB username password

        :return: The asepass of this LinkedSourceDefinition.
        :rtype: str
        """
        return self._asepass

    @asepass.setter
    def asepass(self, asepass):
        """Sets the asepass of this LinkedSourceDefinition.

        Stage DB username password

        :param asepass: The asepass of this LinkedSourceDefinition.
        :type asepass: str
        """
        # Validating the attribute asepass and then saving it.
        if asepass is None:
            raise GeneratedClassesError(
                "The required parameter 'asepass' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'asepass',
                                                          asepass,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._asepass = asepass

    @property
    def asename(self):
        """Gets the asename of this LinkedSourceDefinition.

        SAP ASE Server Name - Needs match with interfaces file name in Host

        :return: The asename of this LinkedSourceDefinition.
        :rtype: str
        """
        return self._asename

    @asename.setter
    def asename(self, asename):
        """Sets the asename of this LinkedSourceDefinition.

        SAP ASE Server Name - Needs match with interfaces file name in Host

        :param asename: The asename of this LinkedSourceDefinition.
        :type asename: str
        """
        # Validating the attribute asename and then saving it.
        if asename is None:
            raise GeneratedClassesError(
                "The required parameter 'asename' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'asename',
                                                          asename,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._asename = asename

    @property
    def aseuser(self):
        """Gets the aseuser of this LinkedSourceDefinition.

        Stage DB username with a SA role

        :return: The aseuser of this LinkedSourceDefinition.
        :rtype: str
        """
        return self._aseuser

    @aseuser.setter
    def aseuser(self, aseuser):
        """Sets the aseuser of this LinkedSourceDefinition.

        Stage DB username with a SA role

        :param aseuser: The aseuser of this LinkedSourceDefinition.
        :type aseuser: str
        """
        # Validating the attribute aseuser and then saving it.
        if aseuser is None:
            raise GeneratedClassesError(
                "The required parameter 'aseuser' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'aseuser',
                                                          aseuser,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._aseuser = aseuser

    @property
    def mount_location(self):
        """Gets the mount_location of this LinkedSourceDefinition.

        Mount Path in Staging server

        :return: The mount_location of this LinkedSourceDefinition.
        :rtype: str
        """
        return self._mount_location

    @mount_location.setter
    def mount_location(self, mount_location):
        """Sets the mount_location of this LinkedSourceDefinition.

        Mount Path in Staging server

        :param mount_location: The mount_location of this LinkedSourceDefinition.
        :type mount_location: str
        """
        # Validating the attribute mount_location and then saving it.
        if mount_location is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_location' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(LinkedSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._mount_location = mount_location
