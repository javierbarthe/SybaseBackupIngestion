#
# Copyright (c) 2019 by Delphix. All rights reserved.
#
from __future__ import absolute_import
from datetime import date, datetime

from generated.definitions.base_model_ import (
    Model, GeneratedClassesError, GeneratedClassesTypeError)
from generated import util

class VirtualSourceDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, vdbpassword=None, vdbusername=None, binarytgt=None, asename=None, vdbname=None, mount_location=None, validate=True):
        """VirtualSourceDefinition - a model defined in Swagger. The type of some of these
        attributes can be defined as a List[ERRORUNKNOWN]. This just means they
        are a list of any type.

            :param vdbpassword: The vdbpassword of this VirtualSourceDefinition.
            :type vdbpassword: str
            :param vdbusername: The vdbusername of this VirtualSourceDefinition.
            :type vdbusername: str
            :param binarytgt: The binarytgt of this VirtualSourceDefinition.
            :type binarytgt: str
            :param asename: The asename of this VirtualSourceDefinition.
            :type asename: str
            :param vdbname: The vdbname of this VirtualSourceDefinition.
            :type vdbname: str
            :param mount_location: The mount_location of this VirtualSourceDefinition.
            :type mount_location: str
            :param validate: If the validation should be done during init. This
            should only be called internally when calling from_dict.
            :type validate: bool
        """
        self.swagger_types = {
            'vdbpassword': str,
            'vdbusername': str,
            'binarytgt': str,
            'asename': str,
            'vdbname': str,
            'mount_location': str
        }

        self.attribute_map = {
            'vdbpassword': 'vdbpassword',
            'vdbusername': 'vdbusername',
            'binarytgt': 'binarytgt',
            'asename': 'asename',
            'vdbname': 'vdbname',
            'mount_location': 'mountLocation'
        }
        
        # Validating the attribute vdbpassword and then saving it.
        if validate and vdbpassword is None:
            raise GeneratedClassesError(
                "The required parameter 'vdbpassword' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'vdbpassword',
                                                          vdbpassword,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._vdbpassword = vdbpassword

        # Validating the attribute vdbusername and then saving it.
        if validate and vdbusername is None:
            raise GeneratedClassesError(
                "The required parameter 'vdbusername' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'vdbusername',
                                                          vdbusername,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._vdbusername = vdbusername

        # Validating the attribute binarytgt and then saving it.
        if validate and binarytgt is None:
            raise GeneratedClassesError(
                "The required parameter 'binarytgt' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'binarytgt',
                                                          binarytgt,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._binarytgt = binarytgt

        # Validating the attribute asename and then saving it.
        if validate and asename is None:
            raise GeneratedClassesError(
                "The required parameter 'asename' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'asename',
                                                          asename,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._asename = asename

        # Validating the attribute vdbname and then saving it.
        if validate and vdbname is None:
            raise GeneratedClassesError(
                "The required parameter 'vdbname' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'vdbname',
                                                          vdbname,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._vdbname = vdbname

        # Validating the attribute mount_location and then saving it.
        if validate and mount_location is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_location' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          True)
        if validate and type_error:
            raise type_error
        self._mount_location = mount_location
    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The virtualSourceDefinition of this VirtualSourceDefinition.
        :rtype: VirtualSourceDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vdbpassword(self):
        """Gets the vdbpassword of this VirtualSourceDefinition.

        vDB username password

        :return: The vdbpassword of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._vdbpassword

    @vdbpassword.setter
    def vdbpassword(self, vdbpassword):
        """Sets the vdbpassword of this VirtualSourceDefinition.

        vDB username password

        :param vdbpassword: The vdbpassword of this VirtualSourceDefinition.
        :type vdbpassword: str
        """
        # Validating the attribute vdbpassword and then saving it.
        if vdbpassword is None:
            raise GeneratedClassesError(
                "The required parameter 'vdbpassword' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'vdbpassword',
                                                          vdbpassword,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._vdbpassword = vdbpassword

    @property
    def vdbusername(self):
        """Gets the vdbusername of this VirtualSourceDefinition.

        vDB username with a SA role

        :return: The vdbusername of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._vdbusername

    @vdbusername.setter
    def vdbusername(self, vdbusername):
        """Sets the vdbusername of this VirtualSourceDefinition.

        vDB username with a SA role

        :param vdbusername: The vdbusername of this VirtualSourceDefinition.
        :type vdbusername: str
        """
        # Validating the attribute vdbusername and then saving it.
        if vdbusername is None:
            raise GeneratedClassesError(
                "The required parameter 'vdbusername' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'vdbusername',
                                                          vdbusername,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._vdbusername = vdbusername

    @property
    def binarytgt(self):
        """Gets the binarytgt of this VirtualSourceDefinition.

        Path of SAP ASE Binaries

        :return: The binarytgt of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._binarytgt

    @binarytgt.setter
    def binarytgt(self, binarytgt):
        """Sets the binarytgt of this VirtualSourceDefinition.

        Path of SAP ASE Binaries

        :param binarytgt: The binarytgt of this VirtualSourceDefinition.
        :type binarytgt: str
        """
        # Validating the attribute binarytgt and then saving it.
        if binarytgt is None:
            raise GeneratedClassesError(
                "The required parameter 'binarytgt' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'binarytgt',
                                                          binarytgt,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._binarytgt = binarytgt

    @property
    def asename(self):
        """Gets the asename of this VirtualSourceDefinition.

        ASE Name Interfaces

        :return: The asename of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._asename

    @asename.setter
    def asename(self, asename):
        """Sets the asename of this VirtualSourceDefinition.

        ASE Name Interfaces

        :param asename: The asename of this VirtualSourceDefinition.
        :type asename: str
        """
        # Validating the attribute asename and then saving it.
        if asename is None:
            raise GeneratedClassesError(
                "The required parameter 'asename' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'asename',
                                                          asename,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._asename = asename

    @property
    def vdbname(self):
        """Gets the vdbname of this VirtualSourceDefinition.

        vDB Name

        :return: The vdbname of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._vdbname

    @vdbname.setter
    def vdbname(self, vdbname):
        """Sets the vdbname of this VirtualSourceDefinition.

        vDB Name

        :param vdbname: The vdbname of this VirtualSourceDefinition.
        :type vdbname: str
        """
        # Validating the attribute vdbname and then saving it.
        if vdbname is None:
            raise GeneratedClassesError(
                "The required parameter 'vdbname' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'vdbname',
                                                          vdbname,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._vdbname = vdbname

    @property
    def mount_location(self):
        """Gets the mount_location of this VirtualSourceDefinition.

        Where to mount VDB onto the target host

        :return: The mount_location of this VirtualSourceDefinition.
        :rtype: str
        """
        return self._mount_location

    @mount_location.setter
    def mount_location(self, mount_location):
        """Sets the mount_location of this VirtualSourceDefinition.

        Where to mount VDB onto the target host

        :param mount_location: The mount_location of this VirtualSourceDefinition.
        :type mount_location: str
        """
        # Validating the attribute mount_location and then saving it.
        if mount_location is None:
            raise GeneratedClassesError(
                "The required parameter 'mount_location' must not be 'None'.")
        type_error = GeneratedClassesTypeError.type_error(VirtualSourceDefinition,
                                                          'mount_location',
                                                          mount_location,
                                                          str,
                                                          True)
        if type_error:
            raise type_error
        self._mount_location = mount_location
